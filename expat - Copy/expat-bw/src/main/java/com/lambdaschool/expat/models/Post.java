
package com.lambdaschool.expat.models;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.*;

/**
 * The entity allowing interaction with the items table
 */
@Entity
@Table(name = "posts")
public class Post extends Auditable {
    /**
     * The primary key (long) of the items table.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private long postId;

    /**
     * Item name. Cannot be null.
     */
    @Column(nullable = false)
    private String name;

    /**
     * Item description.
     */
    private String description;



    /**
     * The userId of the user assigned to this item (e.g. the item seller).
     * This is the entire user object!
     * <p>
     * Forms a Many to One relationship between items and users.
     * A user can have many items.
     */
    @OneToOne
    @JoinColumn(name = "user_id", nullable = false)
    @JsonIgnoreProperties(value = "posts", allowSetters = true)
    private User user;

    /**
     * The marketId of the market assigned to this item.
     * This is the entire market object!
     * <p>
     * Forms a Many to One relationship between items and markets.
     * A market can have many items.
     */
    @ManyToOne
    @JoinColumn(name = "photo_id", nullable = false)
    @JsonIgnoreProperties(value = "posts", allowSetters = true)
    private Photo photo;

    /**
     * The productId of the product (category) assigned to this item.
     * This is the entire product object!
     * <p>
     * Forms a Many to One relationship between items and products.
     * A product can have many items.
     */
    @ManyToOne
    @JoinColumn(name = "story_id", nullable = false)
    @JsonIgnoreProperties(value = "posts", allowSetters = true)
    private Story story;

    /**
     * Default constructor used primarily by the JPA.
     */
    public Post() {}

    /**
     * Given the params, create a new item object
     * <p>
     * itemId is autogenerated
     *
     * @param name The name (String) of the item
     * @param description The description (String) of the item

     */
    public Post(String name, String description) {
        this.name = name;
        this.description = description;

    }

    /**
     * Getter for itemId
     *
     * @return the itemId (long) of the item
     */
    public long getPostId() {
        return postId;
    }

    /**
     * Setter for itemId. Used primary for seeding data
     *
     * @param postId the new itemId (long) of the item
     */
    public void setPostId(long postId) {
        this.postId = postId;
    }

    /**
     * Getter for name
     *
     * @return the name (String) of the item
     */
    public String getName() {
        return name;
    }

    /**
     * Setter for item name
     *
     * @param name (string) of the item
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for description
     *
     * @return the description (String) of the item
     */
    public String getDescription() {
        return description;
    }

    /**
     * Setter for the item description
     *
     * @param description (String) of the item
     */
    public void setDescription(String description) {
        this.description = description;
    }



    /**
     * Getter for user
     *
     * @return the user assigned to the item
     */
    public User getUser() {
        return user;
    }

    /**
     * Setter for the user assigned to the item
     *
     * @param user the user object to replace the one assigned to this item object
     */
    public void setUser(User user) {
        this.user = user;
    }

    /**
     * Getter for market
     *
     * @return the market assigned to the item
     */
    public Photo getPhoto() {
        return photo;
    }

    /**
     * Setter for the market assigned to the item
     *
     * @param photo the market object to replace the one assigned to this item object
     */
    public void setPhoto(Photo photo) {
        this.photo = photo;
    }

    /**
     * Getter for product (category)
     *
     * @return the product (category) assigned to the item
     */
    public Story getStory() {
        return story;
    }

    /**
     * Setter for the product (category) assigned to the item
     *
     * @param story the product object to replace the one assigned to this item object
     */
    public void setStory(Story story) {
        this.story = story;
    }
}
